{"version":3,"file":"static/js/467.f1d7d45b.chunk.js","mappings":"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","sources":["components/Care/Care.styled.js","components/Care/Care.jsx","pages/Care.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport theme from 'components/baseStyles/Variables.styled';\nimport { Container, Section } from 'components/baseStyles/CommonStyle.styled';\n\nconst CareSection = styled(Section)`\n  padding-top: 122px;\n  display: flex;\n  flex-direction: row;\n  @media screen and (min-width: ${theme.breakpoints.tablet}) {\n    padding-top: 154px;\n  }\n`;\n\nconst CareContainer = styled(Container)`\n  margin: 0 auto;\n  width: 100%;\n`;\nexport { CareSection, CareContainer };\n","import React from 'react';\nimport { getCareList } from 'services/APIservice';\nimport { onLoading, onLoaded } from 'components/helpers/Loader/Loader';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { CareContainer, CareSection } from './Care.styled';\n\nexport const Care = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [products, setProducts] = useState(false);\n  const [plant, setPlant] = useState(false);\n  const [, setError] = useState(null);\n\n  const alphabet = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n  ];\n  let arraOfNames = [];\n  if (products) {\n    products.map(item => {\n      arraOfNames.push(...item.common);\n    });\n  }\n  let uniqArr = Array.from(new Set(arraOfNames.map(item => item.trim())));\n\n  const handleChoicePlant = e => {\n    e.preventDefault;\n    let plantForSearch = [];\n    plantForSearch = products?.map(item => {\n      for (let i = 0; i < item.common?.length; i++) {\n        if (item.common[i] === e.currentTarget.innerText) {\n          plantForSearch.push(item);\n        }\n      }\n      setPlant(plantForSearch);\n    });\n  };\n\n  useEffect(() => {\n    (async function getData() {\n      setIsLoading(true);\n      try {\n        const { data } = await getCareList(`/care`);\n        if (!data) {\n          return onFetchError(t('Whoops, something went wrong'));\n        }\n        setProducts(data);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setIsLoading(false);\n      }\n    })();\n  }, []);\n  return (\n    <CareSection>\n      <CareContainer>\n        <h1>CARE</h1>\n        <div>\n          {products &&\n            alphabet.map(item => (\n              <ul key={item}>\n                {item}\n                {arraOfNames &&\n                  uniqArr.map((it, index) => {\n                    if (it?.slice(0, 1).toLowerCase() === item)\n                      return (\n                        <li\n                          style={{ cursor: 'pointer' }}\n                          key={index}\n                          onClick={e => handleChoicePlant(e)}\n                        >\n                          {it}\n                        </li>\n                      );\n                  })}\n              </ul>\n            ))}\n        </div>\n        s{isLoading ? onLoading() : onLoaded()}\n      </CareContainer>\n      <CareContainer>\n        {plant &&\n          plant.map(plant => (\n            <ul key={plant.id}>\n              <li>\n                <span>Common names: </span>\n                <span>{plant.common.join(', ')}</span>\n              </li>\n              <li>\n                <span>Category: </span>\n                <span>{plant.category}</span>\n              </li>\n              <li>\n                <span>Family: </span>\n                <span>{plant.family}</span>\n              </li>\n              <li>\n                <span>Latin name: </span>\n                <span>{plant.latin}</span>\n              </li>\n              <li>\n                <span>Origin: </span>\n                <span>{plant.origin}</span>\n              </li>\n              <li>\n                <span>Ideal light: </span>\n                <span>{plant.ideallight}</span>\n              </li>\n              <li>\n                <span>Tolerated light: </span>\n                <span>{plant.toleratedlight}</span>\n              </li>\n              <li>\n                <span>Watering: </span>\n                <span>{plant.watering}</span>\n              </li>\n              <li>\n                <span>Temp max °C: </span>\n                <span>{plant.tempmax.celsius}</span>\n              </li>\n              <li>\n                <span>Temp min °C: </span>\n                <span>{plant.tempmin.celsius}</span>\n              </li>\n              <li>\n                <span>Use: </span>\n                <span>{plant.use.join(', ')}</span>\n              </li>\n            </ul>\n          ))}\n      </CareContainer>\n    </CareSection>\n  );\n};\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { SEO } from 'utils/SEO';\nimport { useDispatch } from 'react-redux';\nimport { cleanHeaderBottom } from 'redux/header_bottom/operation';\nimport { Care } from '../components/Care/Care';\n\nconst CarePage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(cleanHeaderBottom());\n  }, []);\n\n  return (\n    <>\n      <SEO title=\"HomeForest Care\" description=\"Care of your plants\" />\n      <Care />\n    </>\n  );\n};\n\nexport default CarePage;\n"],"names":["CareSection","styled","Section","_templateObject","_taggedTemplateLiteral","theme","breakpoints","tablet","CareContainer","Container","_templateObject2","Care","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","products","setProducts","_useState5","_useState6","plant","setPlant","_useState7","setError","arraOfNames","map","item","push","apply","_toConsumableArray","common","uniqArr","Array","from","Set","trim","useEffect","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getCareList","data","wrap","_context","prev","next","getCareList","sent","abrupt","onFetchError","t","t0","finish","stop","arguments","_jsxs","children","_jsx","it","index","slice","toLowerCase","style","cursor","onClick","e","preventDefault","plantForSearch","i","_item$common","length","currentTarget","innerText","handleChoicePlant","onLoading","onLoaded","join","category","family","latin","origin","ideallight","toleratedlight","watering","tempmax","celsius","tempmin","use","id","dispatch","useDispatch","cleanHeaderBottom","_Fragment","SEO","title","description"],"sourceRoot":""}