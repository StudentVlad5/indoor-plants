{"version":3,"file":"static/js/765.d613f581.chunk.js","mappings":"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","sources":["components/Schemas/schemas.js","components/helpers/Loader/Loader.jsx","components/Delivery/Delivery.styled.js","components/Delivery/Delivery.jsx","pages/Care.jsx","services/APIservice.js"],"sourcesContent":["import * as Yup from 'yup';\n\nconst registerSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\s*\\S+\\s*$/, 'Email must be without spaces')\n    .matches(/\\S{7,}/, 'Email too short (min 7 symbols)')\n    .matches(\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\n      'Invalid email',\n    )\n    .matches(\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\n      'Dashes should only be inside email',\n    )\n    .required('Require field'),\n  password: Yup.string()\n    .min(7, 'Password too short (min 7)')\n    .max(32, 'Password too long (max 32)')\n    .matches(/^\\s*\\S+\\s*$/, 'Password must be without spaces')\n    .required('Require field'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Password must match')\n    .required('Require field'),\n  name: Yup.string()\n    .matches(/\\S{2,}/, 'Name too short (min 2)')\n    .matches(\n      /((\\s*[a-zA-Z]+\\s*){2,}|[a-zA-Z]{2,})/,\n      'Name must includes only Latin alphabet',\n    )\n    .required('Require field'),\n  phone: Yup.number()\n    .nullable(true)\n    .required('Require field')\n    .min(99999)\n    .max(999999999999),\n  location: Yup.string()\n    .matches(\n      /(([A-Za-zsd&.-]){1,}, ([A-Za-zsd&,.-]){1,})/,\n      'Invalid format. Example: Brovary, Kyiv ...',\n    )\n    .required('Require field'),\n});\n\nconst schemasLogin = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\s*\\S+\\s*$/, 'Email must be without spaces')\n    .matches(/\\S{7,}/, 'Email too short (min 7 symbols)')\n    .matches(\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\n      'Invalid email',\n    )\n    .matches(\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\n      'Dashes should only be inside email',\n    )\n    .required('Require'),\n  password: Yup.string()\n    .min(7, 'Password too short (min 7)')\n    .max(32, 'Password too long (max 32)')\n    .matches(/^\\s*\\S+\\s*$/, 'Password must be without spaces')\n    .required('Require'),\n});\n\nconst changePasswordSchema = Yup.object().shape({\n  email: Yup.string()\n    .matches(/^\\s*\\S+\\s*$/, 'Email must be without spaces')\n    .matches(/\\S{7,}/, 'Email too short (min 7 symbols)')\n    .matches(\n      /^(?=.{7,63}$)([^а-яА-Я]+@([a-zA-Z]+\\.)+[a-zA-z]{2,3})$/g,\n      'Invalid email',\n    )\n    .matches(\n      /^[^-]+((.*[^-]))*@([a-zA-Z]+\\.)+[a-zA-z]{2,3}$/g,\n      'Dashes should only be inside email',\n    )\n    .required('Require field'),\n});\n\nconst checkDepartmentNP = Yup.object().shape({\n  city: Yup.string().min(3).max(80).required('Require field'),\n  department: Yup.string().min(3).max(180).required('Require field'),\n});\n\n// const noticeSchemaFirst = Yup.object().shape({\n//   category: Yup.string().required('Category is Required!'),\n//   typeofpet: Yup.string().required('Type of Pet is Required!'),\n//   title: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(48, 'Too Long!')\n//     .required('Title is Required!'),\n//   name: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(16, 'Too Long!')\n//     .required('Name is Required!'),\n//   birthday: Yup.date().required('BirthDay is Required!'),\n//   breed: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(34, 'Too Long!')\n//     .required('Breed is Required!'),\n// });\n// const noticeSchemaSecond = Yup.object().shape({\n//   sex: Yup.string().required('Sex is Required!'),\n//   size: Yup.string().required('Size is Required!'),\n//   height: Yup.number()\n//     .moreThan('0')\n//     .positive()\n//     .integer()\n//     .max(100, 'Too Match!')\n//     .required('Height is Required!'),\n//   weight: Yup.number()\n//     .moreThan('0')\n//     .positive()\n//     .max(100, 'Too Match!')\n//     .required('Weight is Required!'),\n//   location: Yup.string()\n//     .matches(\n//       /(([0-9A-Za-zsd&.-]){1,}, ([0-9A-Za-zsd&,.-]){1,})/,\n//       'Invalid format. Example: Brovary, Kyiv ...',\n//     )\n//     .required('Location is Required!'),\n// });\n\n// const noticeSchemaSecondPrice = noticeSchemaSecond.concat(\n//   Yup.object().shape({\n//     price: Yup.number()\n//       .moreThan('0')\n//       .positive()\n//       .integer()\n//       .required('Price is Required!'),\n//     currency: Yup.string().required('Currency is Required!'),\n//   }),\n// );\n\n// const noticeSchemaThird = Yup.object().shape({\n//   imageUrl: Yup.string().required('Image is Required!'),\n//   imageUrl_1: Yup.string(),\n//   imageUrl_2: Yup.string(),\n//   passport: Yup.string().required('Passport is Required!'),\n//   sterilization: Yup.string().required('Sterilization is Required!'),\n//   lives: Yup.string().required('Lives is Required!'),\n//   comments: Yup.string()\n//     .min(8, 'Too Short!')\n//     .max(120, 'Too Long!')\n//     .required('Comments are Required!'),\n// });\n\n// const noticeSchemaThirdforEdit = Yup.object().shape({\n//   imageUrl: Yup.string(),\n//   imageUrl_1: Yup.string(),\n//   imageUrl_2: Yup.string(),\n//   passport: Yup.string().required('Passport is Required!'),\n//   sterilization: Yup.string().required('Sterilization is Required!'),\n//   lives: Yup.string().required('Lives is Required!'),\n//   comments: Yup.string()\n//     .min(8, 'Too Short!')\n//     .max(120, 'Too Long!')\n//     .required('Comments are Required!'),\n// });\n\n// const addPetsUser = Yup.object().shape({\n//   name: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(16, 'Too Long!')\n//     .required('Name is Required!'),\n\n//   data: Yup.date().required('BirthDay is Required!'),\n\n//   breed: Yup.string()\n//     .min(2, 'Too Short!')\n//     .max(34, 'Too Long!')\n//     .required('Breed is Required!'),\n\n//   // imageUrl: Yup.mixed().required('Photo is Required!'),\n\n//   comments: Yup.string()\n//     .min(8, 'Too Short!')\n//     .max(120, 'Too Long!')\n//     .required('Comments are Required!'),\n// });\n\nconst schemas = {\n  registerSchema,\n  schemasLogin,\n  changePasswordSchema,\n  checkDepartmentNP,\n};\n\nexport default schemas;\n","import { Loading } from 'notiflix/build/notiflix-loading-aio';\nconst onLoading = () => {\n  return Loading.circle('Loading...', {\n    backgroundColor: 'transparent',\n    svgSize: '160px',\n    svgColor: `${props => props.theme.orangeLight}`,\n    messageFontSize: '20px',\n  });\n};\n\nconst onLoaded = () => {\n  return Loading.remove();\n};\n\nexport { onLoading, onLoaded };\n","import { Section, Title } from 'components/baseStyles/CommonStyle.styled';\nimport theme from 'components/baseStyles/Variables.styled';\nimport { Button } from 'components/helpers/ButtonSplit/ButtonSplit.styled';\nimport styled from 'styled-components';\nimport Select from 'react-select';\n\nexport const FormSection = styled(Section)`\n  @media screen and (max-width: ${theme.breakpoints.tablet_max}) {\n    background-repeat: no-repeat;\n    background-size: 620px auto;\n    background-position: bottom -250px left 30%;\n  }\n\n  @media screen and (min-width: ${theme.breakpoints\n      .tablet}) and (max-width: ${theme.breakpoints.desktop_max}) {\n    background-repeat: no-repeat;\n    background-size: 1396px auto;\n    background-position: bottom -130px left 50%;\n  }\n`;\n\nexport const FormContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TitleDelivery = styled(Title)`\n  margin-bottom: 40px;\n  margin-top: 0;\n  text-transform: uppercase;\n\n  @media screen and (min-width: ${theme.breakpoints.tablet}) {\n    font-size: ${theme.fontSizes.extraXL};\n    font-weight: 500;\n    margin-bottom: 32px;\n    color: ${theme.colors.brown1};\n  }\n`;\nexport const Div = styled.div`\n  margin-bottom: 32px;\n`;\n\nexport const SelectInput = styled(Select)``;\n\nexport const BtnContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: nowrap;\n  justify-content: space-between;\n  align-items: center;\n  width: 280px;\n  margin-bottom: 32px;\n  @media screen and (min-width: ${theme.breakpoints.tablet}) {\n    width: 448px;\n    font-size: ${theme.fontSizes.medium};\n  }\n  @media screen and (min-width: ${theme.breakpoints.desktop}) {\n    width: 558px;\n  }\n`;\n\nexport const Btn = styled(Button)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  border-radius: 4px;\n  color: ${theme.colors.brown1};\n  background: ${theme.colors.green4};\n  transform: scale(1);\n  cursor: pointer;\n  position: relative;\n  overflow-x: hidden;\n  overflow-y: hidden;\n  transition: all 0.25s ease-in;\n  :hover,\n  :focus {\n    transform: scale(1.05);\n    transition: transform 0.5s;\n    color: ${theme.colors.white};\n    background: ${theme.colors.brown2};\n  }\n  :disabled {\n    opacity: 0.5;\n    cursor: auto;\n    transform: none;\n    transition: none;\n  }\n`;\n","import React, { useState, useEffect } from 'react';\nimport schemas from 'components/Schemas/schemas';\nimport {\n  FormSection,\n  FormContainer,\n  TitleDelivery,\n  Div,\n  BtnContainer,\n  Btn,\n  SelectInput,\n} from './Delivery.styled';\nimport { getListOfCities, getListOfDepartments } from 'services/APIservice';\nimport { onLoaded, onLoading } from 'components/helpers/Loader/Loader';\n\nconst Delivery = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [cityName, setSityName] = useState('');\n  const [checkSityName, setCheckSityName] = useState('');\n  const [listOfCities, setListOfSities] = useState([]);\n\n  const [departmentName, setDepartmentName] = useState('');\n  const [cityRef, setCityRef] = useState('');\n  const [checkCityRef, setCheckCityRef] = useState('');\n  const [listOfDepartment, setListOfDepartment] = useState([]);\n\n  useEffect(() => {\n    async function getData(cityName) {\n      setCheckSityName(cityName);\n      setIsLoading(true);\n      try {\n        const { data } = await getListOfCities('/cities', { filter: cityName });\n        setListOfSities(data);\n        if (!data) {\n          return alert('Whoops, something went wrong');\n        }\n      } catch (error) {\n        alert(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    if (checkSityName !== cityName && cityName.length > 2) {\n      getData(cityName);\n    }\n  }, [cityName, checkSityName]);\n\n  const departmentCity = listOfCities.filter(\n    key => key.Description === checkSityName,\n  )[0];\n  if (departmentCity && departmentCity.Ref !== cityRef) {\n    setCityRef(departmentCity.Ref);\n  }\n\n  useEffect(() => {\n    async function getData() {\n      setCheckCityRef(cityRef);\n      setIsLoading(true);\n      try {\n        const { data } = await getListOfDepartments('/departments', {\n          filter: cityRef,\n        });\n        setListOfDepartment(data);\n        if (!data) {\n          return alert('Whoops, something went wrong');\n        }\n      } catch (error) {\n        alert(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    if (cityRef !== checkCityRef) {\n      getData();\n    }\n  }, [cityRef, checkCityRef]);\n\n  function options(city) {\n    const options = [];\n    const list = [...listOfCities];\n    list\n      .filter(key =>\n        key.Description.toLowerCase()\n          .split('(')[0]\n          .includes(city.toLowerCase()),\n      )\n      .forEach(key => {\n        const obj = {};\n        if (key.Description) {\n          obj.value = key.Description;\n          obj.label = key.Description;\n          options.push(obj);\n        }\n      });\n    return options;\n  }\n\n  function o(city) {\n    const options = [];\n    if (listOfDepartment) {\n      const list = [...listOfDepartment];\n      list\n        .filter(key =>\n          key.Description.toLowerCase().includes(city.toLowerCase()),\n        )\n        .forEach(key => {\n          const obj = {};\n          if (key.Description) {\n            obj.value = key.Description;\n            obj.label = key.Description;\n            options.push(obj);\n          }\n        });\n    }\n    return options;\n  }\n  return (\n    <FormSection>\n      <FormContainer>\n        <h2>Delivery block</h2>\n        <TitleDelivery>{'Nova Poshta departments'}</TitleDelivery>\n        <Div>\n          <SelectInput\n            name=\"cityName\"\n            type=\"submit\"\n            className=\"basic-single\"\n            classNamePrefix=\"select\"\n            onInputChange={e => setSityName(e)}\n            onChange={e => {\n              if (e?.value) {\n                setSityName(e.value);\n              }\n            }}\n            defaultValue={cityName}\n            isDisabled={false}\n            isClearable={true}\n            isSearchable={true}\n            validate={schemas.checkDepartmentNP.city}\n            options={options(cityName)}\n            placeholder={cityName === '' ? 'Select city please...' : cityName}\n          />\n          {/* <BtnContainer><Btn type=\"submit\"  aria-label=\"submit\">Submit</Btn>\n                                   </BtnContainer>  */}\n        </Div>\n        <Div>\n          <SelectInput\n            name=\"departmentName\"\n            type=\"text\"\n            className=\"basic-single\"\n            classNamePrefix=\"select\"\n            onInputChange={e => setDepartmentName(e)}\n            defaultValue={departmentName}\n            isDisabled={!checkCityRef}\n            isClearable={true}\n            isSearchable={true}\n            validate={schemas.checkDepartmentNP.department}\n            options={o(departmentName)}\n            placeholder={\n              departmentName === ''\n                ? 'Select department please...'\n                : departmentName\n            }\n          />\n        </Div>\n        {isLoading ? onLoading() : onLoaded()}\n      </FormContainer>\n    </FormSection>\n  );\n};\n\nexport default Delivery;\n","import React from 'react';\nimport { useEffect } from 'react';\nimport { SEO } from 'utils/SEO';\nimport { useDispatch } from 'react-redux';\nimport { cleanHeaderBottom } from 'redux/header_bottom/operation';\nimport Delivery from 'components/Delivery/Delivery';\n\nconst CarePage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(cleanHeaderBottom());\n  }, []);\n\n  return (\n    <>\n      <SEO title=\"HomeForest Care\" description=\"Care of your plants\" />\n      <Delivery />\n    </>\n  );\n};\n\nexport default CarePage;\n","import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst { BASE_URL } = window.global;\n\n// pathParams\nasync function fetchData(pathParams) {\n  const axiosInstance = axios.create({\n    baseURL: `${BASE_URL}${pathParams}`, //${pathParams}\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n      'Access-Control-Expose-Headers': 'Content-Range',\n      'Access-Control-Allow-Header': 'Origin, Content-Type, X-Auth-Token',\n    },\n  });\n\n  return await axiosInstance.get();\n}\n\nasync function updateUserData(pathParams, body, file) {\n  const formData = new FormData();\n  file && formData.set('avatar', file);\n  formData.append('email', body.email);\n  formData.append('birthday', body.birthday);\n  formData.append('location', body.location);\n  formData.append('password', body.password);\n  formData.append('phone', body.phone);\n  // formData.append('role', body.role);\n  formData.append('userName', body.userName);\n\n  return await axios.patch(`${BASE_URL}${pathParams}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    },\n  });\n}\n\nasync function deleteData(pathParams) {\n  const formData = new FormData();\n  return axios.delete(`${BASE_URL}${pathParams}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    },\n  });\n}\n\nasync function getFavorites(pathParams) {\n  const formData = new FormData();\n  return axios.post(`${BASE_URL}${pathParams}`, formData, {\n    headers: {\n      'Content-Type': 'multipart/form-data',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    },\n  });\n}\n\nasync function getListOfCities(pathParams, body) {\n  // const formData = new FormData();\n  // formData.append(\"filter\", body.filter);\n  return await axios.post(`${BASE_URL}${pathParams}`, body, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    },\n  });\n}\n\nasync function getListOfDepartments(pathParams, body) {\n  return await axios.post(`${BASE_URL}${pathParams}`, body, {\n    headers: {\n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET,POST,PUT,PATCH,DELETE,OPTIONS',\n    },\n  });\n}\n\nfetchData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n};\n\ndeleteData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n};\n\nupdateUserData.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n  formData: PropTypes.string.isRequired,\n};\n\ngetFavorites.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n  formData: PropTypes.string.isRequired,\n};\n\ngetListOfCities.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n};\n\ngetListOfDepartments.propTypes = {\n  pathParams: PropTypes.string.isRequired,\n  body: PropTypes.string.isRequired,\n};\n\nexport {\n  fetchData,\n  updateUserData,\n  deleteData,\n  getFavorites,\n  getListOfCities,\n  getListOfDepartments,\n};\n"],"names":["schemas","registerSchema","Yup","shape","email","matches","required","password","min","max","confirmPassword","oneOf","name","phone","nullable","location","schemasLogin","changePasswordSchema","checkDepartmentNP","city","department","onLoading","Loading","circle","backgroundColor","svgSize","svgColor","concat","props","theme","orangeLight","messageFontSize","onLoaded","remove","FormSection","styled","Section","_templateObject","_taggedTemplateLiteral","breakpoints","tablet_max","tablet","desktop_max","FormContainer","div","_templateObject2","TitleDelivery","Title","_templateObject3","fontSizes","extraXL","colors","brown1","Div","_templateObject4","SelectInput","Select","_templateObject5","_templateObject6","medium","desktop","Button","_templateObject7","green4","white","brown2","_useState","useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useState3","_useState4","cityName","setSityName","_useState5","_useState6","checkSityName","setCheckSityName","_useState7","_useState8","listOfCities","setListOfSities","_useState9","_useState10","departmentName","setDepartmentName","_useState11","_useState12","cityRef","setCityRef","_useState13","_useState14","checkCityRef","setCheckCityRef","_useState15","_useState16","listOfDepartment","setListOfDepartment","useEffect","_getData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$getListOfCitie","data","wrap","_context","prev","next","getListOfCities","filter","sent","abrupt","alert","t0","message","finish","stop","apply","arguments","length","_x","getData","departmentCity","key","Description","Ref","_getData2","_callee2","_yield$getListOfDepar","_context2","getListOfDepartments","_jsx","children","_jsxs","type","className","classNamePrefix","onInputChange","e","onChange","value","defaultValue","isDisabled","isClearable","isSearchable","validate","options","_toConsumableArray","toLowerCase","split","includes","forEach","obj","label","push","placeholder","o","dispatch","useDispatch","cleanHeaderBottom","_Fragment","SEO","title","description","Delivery","BASE_URL","window","global","fetchData","_fetchData","pathParams","axiosInstance","axios","create","baseURL","headers","get","getFavorites","_x6","_getFavorites","_callee4","formData","_context4","FormData","post","_x7","_x8","_getListOfCities","_callee5","body","_context5","_x9","_x10","_getListOfDepartments","_callee6","_context6","propTypes","PropTypes","isRequired"],"sourceRoot":""}